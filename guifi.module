<?php
/**
 * @file guifi.module
 */

 include_once 'guifi_includes.inc.php';
include_once 'guifi_zone.inc.php';
include_once 'guifi_location.inc.php';      // node (location) management
include_once 'guifi_service.inc.php';   // services management
include_once 'guifi_devices.inc.php';   // device management
include_once 'guifi_maintainers.inc.php'; // maintainers
include_once 'guifi_funders.inc.php';   // funders
include_once 'guifi_ipv4.inc.php';      // ipv4 network management
include_once 'guifi_radios.inc.php';    // radios management
include_once 'guifi_switch.inc.php';    // switch management
include_once 'guifi_interfaces.inc.php';// interfaces management
include_once 'guifi_links.inc.php';     // links management
include_once 'guifi_users.inc.php';     // user management
include_once 'guifi_graphs.inc.php';    // graphs management
include_once 'guifi_unsolclic.inc.php'; // unsolclic generator
include_once 'guifi_domains.inc.php';   // Domain name server management
include_once 'guifi_hosts.inc.php';     // Host name server management
// include_once 'guifi_nodexchange.inc.php';// nodeXchange (XML) generator
include_once 'guifi_cnml.inc.php';      // CNML (XML) generator
include_once 'guifi_gml.inc.php';       // gml (geographic XML export) generator
include_once 'guifi_maps.inc.php';      // maps management
  // misc. routines
include_once 'guifi_networkutils.inc.php';  // network calc routines
include_once 'guifi_sql.inc.php';       // database changes
include_once 'guifi_ahah.inc.php';      // AHAH functions
include_once 'GeoCalc.class.php';       // geographic routines
include_once 'guifi_spatial.inc.php';   // spatial searches

include_once 'guifi_api.inc.php';       // Guifi public API includes
include_once 'libs/GuifiAPI.php';       // Guifi API


/** Implementation of drupal main hooks.
 *

/** menu hooks
*/


function guifi_menu() {
  //
  // ADMINISTRATION settings
  //
  $items['admin/config/guifi'] = array(
    'title' => 'guifi.net configuration',
    'description' => 'Configure guifi.net module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guifi_admin_settings'),
    'access arguments' => array('access administration pages'),
  );

  $items['guifi'] = array(
     'title' => 'guifi.net main page',
     'description' => 'Main menu for guifi.net network management and utilities',
     'page callback' => 'guifi_page',
     'page arguments' => array('TRUE'),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
  );

  // Refresh maps callback
  $items['guifi/refresh'] = array(
    'title' => 'check if data must be refreshed',
    'page callback' => 'guifi_refresh',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);

  // General guifi menu
  $items['guifi/menu'] = array(
     'title' => 'guifi.net menus',
     'description' => 'Main menu for guifi.net network management and utilities',
     'page callback' => 'guifi_page',
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
  );
  $items['guifi/menu/compact'] = array(
    'title' => 'Compact mode',
    'page callback' => 'guifi_menu_compact_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // General options
  $items['guifi/menu/main'] = array(
    'title' => 'Main navigation options',
    'description' => 'The most important options to browse and use this site',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access content'),
    'weight' => 0,
  );
  $items['guifi/menu/main/browse_zones'] = array(
    'title' => 'Browse the network',
    'description' => 'Browse the network zones starting from the root zone',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/'. guifi_zone_root()),
    'access arguments' => array('access content'),
  );

  if (variable_get('guifi_forums', 'forum') != '')
  $items['guifi/menu/main/forums'] = array(
    'title' => 'Forums',
    'description' => 'Do you have questions? Browse the questions or post your own question to the forums',
    'page callback' => 'drupal_goto',
    'page arguments' => array(variable_get('guifi_forums', 'forum')),
    'access arguments' => array('access content'),
  );
  $items['guifi/menu/main/addnode'] = array(
    'title' => 'Create a node',
    'description' => 'Join to the network by creating your node',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/add/guifi-node'),
    'access arguments' => array('access content'),
  );
  if (variable_get('guifi_faq', '') != '')
  $items['guifi/menu/main/faq'] = array(
    'title' => 'FAQ',
    'description' => 'Browse the most common questions',
    'page callback' => 'drupal_goto',
    'page arguments' => array(variable_get('guifi_faq', '')),
    'access arguments' => array('access content'),
  );
  if (variable_get('guifi_docs', '') != '')
  $items['guifi/menu/main/docs'] = array(
    'title' => 'Documentation',
    'description' => 'Browse the guide and documentation',
    'page callback' => 'drupal_goto',
    'page arguments' => array(variable_get('guifi_docs', '')),
    'access arguments' => array('access content'),
  );

  // Database review and pending actions
  $items['guifi/menu/workflow'] = array(
    'title' => 'Data to review and Pending actions',
    'description' => 'Clean and review the database and take the appropriate pending actions',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access content'),
    'weight' => 1,
  );

  $items['guifi/menu/workflow/usersqueue'] = array(
    'title' => 'Users queue',
    'description' => 'Track the users assigned to nodes detected as active, and therefore pending for approval',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/' .guifi_zone_root(). '/view/userqueue'),
    'access arguments' => array('access content'),
  );
  $items['guifi/menu/workflow/pending'] = array(
    'title' => 'Node queue',
    'description' => 'Track the status of the not active nodes, pending for getting connected',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/'. guifi_zone_root() .'/view/pending'),
    'access arguments' => array('access content'),
  );

  $items['guifi/menu/workflow/availability'] = array(
    'title' => 'Availability report',
    'description' => 'Report of the status and availability of all nodes',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/'. guifi_zone_root() .'/view/availability'),
    'access arguments' => array('access content'),
  );

  $items['guifi/menu/workflow/datareview'] = array(
    'title' => 'Data review',
    'description' => '',
    'page callback' => 'guifi_tools_datareview',
    'access arguments' => array('create guifi nodes'),
    'file' => 'guifi_tools.inc.php'
  );

  // Network management tools
  $items['guifi/menu/ip'] = array(
    'title' => 'IP and Network management tools',
    'description' => 'Utilities toolset for various network addressing and management',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access content'),
    'weight' => 2,
  );
  $items['guifi/menu/ip/ipsearch'] = array(
    'title' => 'Search IPv4',
    'description' => 'Query information about assigned IPv4 addresses',
    'page callback' => 'guifi_tools_ip_search',
    'access arguments' => array('access content'),
    'file' => 'guifi_tools.inc.php',
    'weight' => 1
  );
  $items['guifi/menu/ip/networksearch'] = array(
    'title' => 'Available subnetwork range',
    'description' => 'Search for a not used range of network addresses at the database',
    'page callback' => 'guifi_tools_ip_rangesearch',
    'access arguments' => array('access content'),
    'file' => 'guifi_tools.inc.php',
    'weight' => 2
  );
//  $items['guifi/menu/ip/availableipsearch'] = array(
//    'title' => 'Free IPv4 in a subnetwork',
//    'description' => 'Search for unused IPv4 addresses in a given range',
//    'page callback' => 'guifi_tools_ip_ipavailable',
//    'access arguments' => array('access content'),
//    'file' => 'guifi_tools.inc.php',
//    'weight' => 3
//  );
  $items['guifi/menu/ip/macsearch'] = array(
    'title' => 'Search MAC',
    'description' => 'Query information about existing MAC addresses',
    'page callback' => 'guifi_tools_mac_search',
    'access arguments' => array('access content'),
    'file' => 'guifi_tools.inc.php',
    'weight' => 4
  );
  $items['guifi/menu/ip/mailsearch'] = array(
    'title' => 'Find/Replace contact emails',
    'description' => 'Search and update existing notification e-mail addresses in all tables.',
    'page callback' => 'guifi_tools_mail_search',
    'access arguments' => array('create guifi nodes'),
    'file' => 'guifi_tools.inc.php',
    'weight' => 5
  );
  $items['guifi/menu/ip/traceroute'] = array(
    'title' => 'Traceroute',
    'description' => 'Software traceroute. Find out possible routes between devices or discover the closest services.',
    'page callback' => 'guifi_traceroute_search',
    'access arguments' => array('create guifi nodes'),
    'weight' => 6,
    'file' => 'guifi_traceroute.inc.php'
  );
  $items['guifi/menu/ip/liveping'] = array(
    'title' => 'live ping',
    'description' => 'ping to address',
    'page callback' => 'guifi_live_ping',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'guifi_traceroute.inc.php'
  );
  $items['guifi/menu/ip/livetraceroute'] = array(
    'title' => 'live traceroute',
    'description' => 'traceroute to device',
    'page callback' => 'guifi_live_traceroute',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'guifi_traceroute.inc.php'
  );
  $items['guifi/menu/ip/routingmap'] = array(
    'title' => 'OSPF Routing Map',
    'description' => 'Routing areas map.',
    'page callback' => 'guifi_routingmap_init',
    'access arguments' => array('create guifi nodes'),
    'weight' => 7,
    'file' => 'guifi_routingmap.inc.php'
  );
  $items['guifi/menu/ip/allroutingmap'] = array(
    'title' => 'All Routing Map',
    'description' => 'Routing areas map.',
    'page callback' => 'guifi_routingmap_all_init',
    'access arguments' => array('create guifi nodes'),
    'weight' => 8,
    'file' => 'guifi_routingmap.inc.php'
  );

  $items['guifi/routingmap/%/%'] = array(
    'title' => 'Routing Map',
    'page callback' => 'guifi_routingmap',
    'page arguments' => array(2, 3),
    'access arguments' => array('create guifi nodes'),
    'file' => 'guifi_routingmap.inc.php'
  );

  // Administrator's tools
  $items['guifi/menu/admin'] = array(
    'title' => 'Administration tools',
    'description' => 'Utilities for administrators, use with care, regular users shouldn\'t have this block.',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );
  $items['guifi/menu/admin/sendnotify'] = array(
    'title' => 'Send notifications',
    'description' => 'Flush the notification queue by sending all pending messages',
    'page callback' => 'guifi_admin_notify',
    'access arguments' => array('administer site configuration'),
    'weight' => 0,
    'file' => 'guifi_tools.inc.php'
  );
  $items['guifi/menu/admin/viewnotify'] = array(
    'title' => 'View notifications',
    'description' => 'View the notification queue by printing all pending messages on the screen, this will not flush the queue',
    'page callback' => 'guifi_admin_notify',
    'page arguments' => array('TRUE'),
    'access arguments' => array('administer site configuration'),
    'weight' => 1,
    'file' => 'guifi_tools.inc.php'
  );
  $items['guifi/menu/admin/loadstats'] = array(
    'title' => 'Load statistics',
    'description' => 'Load statistics from remote CNML graph servers into the database',
    'page callback' => 'guifi_admin_loadstats',
    'access arguments' => array('administer site configuration'),
    'weight' => 2,
    'file' => 'guifi_tools.inc.php'
  );
  $items['guifi/menu/admin/guifisettings'] = array(
    'title' => 'guifi.net settings',
    'description' => 'Change the settings for "guifi.net" module ',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/guifi'),
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );


  // Developer's tools
  $items['guifi/menu/devel'] = array(
    'title' => 'Development tools',
    'description' => 'Utilities for developers, experimental or under texting, use with care, regular users shouldn\'t have this block.',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access devel information'),
    'weight' => 100,
  );
  $items['guifi/menu/devel/device'] = array(
    'title' => 'Device Model Specs',
    'description' => 'A full list of devices we use in the network, add, edit or delete it.',
    'page callback' => 'guifi_devel_devices',
    'access arguments' => array('guifi module developer'),
    'weight' => 8,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/device/%/%'] = array(
    'title' => 'Device Models Specs',
    'page callback' => 'guifi_devel_devices',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/service'] = array(
    'title' => 'Services',
    'description' => 'A full list of services we use in the network, add, edit or delete it.',
    'page callback' => 'guifi_devel_services',
    'access arguments' => array('guifi module developer'),
    'weight' => 8,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/service/%/%'] = array(
    'title' => 'Services',
    'page callback' => 'guifi_devel_services',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/firmware'] = array(
    'title' => 'Firmware',
    'description' => 'A full list of firmware we use in the devices, add, edit or delete it.',
    'page callback' => 'guifi_devel_firmware',
    'access arguments' => array('guifi module developer'),
    'weight' => 9,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/firmware/%/%'] = array(
    'title' => 'Firmware',
    'page callback' => 'guifi_devel_firmware',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/manufacturer'] = array(
    'title' => 'Manufacturers',
    'description' => 'A full list of manufacturers that made the devices usedon our network, add, edit or delete it.',
    'page callback' => 'guifi_devel_manufacturer',
    'access arguments' => array('guifi module developer'),
    'weight' => 10,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/manufacturer/%/%'] = array(
    'title' => 'Manufacturers',
    'page callback' => 'guifi_devel_manufacturer',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/parameter'] = array(
    'title' => 'Generic Firmware Parameters',
    'description' => 'A full list of Generic Firmware parameters that supports certain firmware used on our network, add, edit or delete it.',
    'page callback' => 'guifi_devel_parameter',
    'access arguments' => array('guifi module developer'),
    'weight' => 10,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/parameter/%/%'] = array(
    'title' => 'Generic Firmware Parameters',
    'page callback' => 'guifi_devel_parameter',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/feature'] = array(
    'title' => 'Device Model Features',
    'description' => 'A full list of Model Features used on our network, add, edit or delete it.',
    'page callback' => 'guifi_devel_modelfeature',
    'access arguments' => array('guifi module developer'),
    'weight' => 10,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/feature/%/%'] = array(
    'title' => 'Device Model Features',
    'page callback' => 'guifi_devel_modelfeature',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/configuraciousc'] = array(
    'title' => 'Configuracions UnSolclic',
    'description' => 'A full list of Configuracions UnSolclic used on our network, add, edit or delete it.',
    'page callback' => 'guifi_devel_configuracio_usc',
    'access arguments' => array('guifi module developer'),
    'weight' => 10,
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/configuraciousc/%/%'] = array(
    'title' => 'Configuracions UnSolclic',
    'page callback' => 'guifi_devel_configuracio_usc',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/paramusc/%/%'] = array(
    'title' => 'Configuracions UnSolclic',
    'page callback' => 'guifi_devel_paramusc',
    'page arguments' => array(4, 5),
    'access arguments' => array('guifi module developer'),
    'file' => 'guifi_devel.inc.php'
  );
  $items['guifi/menu/devel/counters'] = array(
    'title' => 'counters',
    'description' => 'get statistics/counters from the network',
    'page callback' => 'guifi_counters_block',
    'access arguments' => array('access devel information'),
    'weight' => 2,
//    'file' => 'guifi_traceroute.inc.php'
  );
  $items['guifi/menu/devel/purgue'] = array(
    'title' => 'purge',
    'description' => 'purge orphan data',
    'page callback' => 'guifi_purge',
    'page arguments' => array('TRUE'),
    'access arguments' => array('access devel information'),
    'weight' => 3,
  );
    $items['guifi/menu/devel/overlap'] = array(
    'title' => 'overlap',
    'description' => 'check for overlapping routes.',
    'page callback' => 'guifi_overlap_check',
    'page arguments' => array('TRUE'),
    'access arguments' => array('access devel information'),
    'weight' => 4,
  );
    $items['guifi/menu/devel/initdevices'] = array(
    'title' => 'Update Device Properties',
    'description' => 'Update devices with info from old extra field',
    'page callback' => 'guifi_update_devices_fromExtraInfo',
    'page arguments' => array('TRUE'),
    'access arguments' => array('access devel information'),
    'weight' => 5,
  );
    $items['guifi/menu/devel/checkunsolclics'] = array(
    'title' => 'Check UnSolclics',
    'description' => 'Check local UnsolClics against a trusted remote server ',
    'page callback' => 'guifi_check_unsolclics',
    'page arguments' => array('TRUE'),
    'access arguments' => array('access devel information'),
    'weight' => 5,
  );

  // Statistics
  $items['guifi/menu/stats'] = array(
    'title' => 'Statistics',
    'description' => 'Statistics',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access content'),
    'weight' => 100,
  );
  $items['guifi/menu/stats/growthmap'] = array(
    'title' => 'History map',
    'description' => 'Display guifi.net network history map.',
    'page callback' => 'guifi_stats_growthmap',
    'access arguments' => array('access content'),
    'weight' => 1,
    'file' => 'guifi_stats.inc.php'
  );
  $items['guifi/menu/stats/nodes'] = array(
    'title' => 'Node statistics',
    'description' => '',
    'page callback' => 'guifi_stats_nodes',
    'access arguments' => array('access content'),
    'weight' => 2,
    'file' => 'guifi_stats.inc.php'
  );
  $items['guifi/stats/%'] = array(
    'title' => 'stats charts',
    'page callback' => 'guifi_stats',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'guifi_stats.inc.php'
  );
  $items['guifi/stats/%/%'] = array(
    'title' => 'stats charts',
    'page callback' => 'guifi_stats',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'guifi_stats.inc.php'
  );



//  $items['guifi/menu/devel/get_ips_new'] = array(
//    'title' => 'get_ips_new callback',
//    'description' => 'Test for NEW load and sort the ip tables',
//    'page callback' => 'guifi_admin_get_ips_new',
//    'access arguments' => array('access devel information'),
//    'weight' => 0,
//    'file' => 'guifi_tools.inc.php'
//  );
  //
  // ZONE menus and tabs
  //
  $items['node/%guifi_zone/view/nodes'] = array(
    'title' => 'nodes',
    'page callback' => 'theme_guifi_zone_nodes',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%guifi_zone/view/map'] = array(
    'title' => 'map',
    'page callback' => 'theme_guifi_zone_map',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/data'] = array(
    'title' => 'data',
    'page callback' => 'theme_guifi_zone_data',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/availability'] = array(
    'title' => 'availability',
    'page callback' => 'guifi_zone_availability',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/pending'] = array(
    'title' => 'pending/review',
    'page callback' => 'guifi_zone_availability',
    'page arguments' => array(1, 3),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/services'] = array(
    'title' => 'services',
    'page callback' => 'theme_guifi_services_list',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/ipv4'] = array(
    'title' => 'networks',
    'page callback' => 'theme_guifi_zone_networks',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  if (module_exists('budgets')) {
    $items['node/%guifi_zone/suppliers'] = array(
      'title' => 'Suppliers',
      'page callback' => 'budgets_supplier_list_by_zone',
      'page arguments' => array(1,3),
      'access callback' => 'guifi_zone_access_callback',
      'access arguments' => array(1),
      'weight'=> 99,
      'type' => MENU_LOCAL_TASK
    );
    $items['node/%guifi_zone/suppliers/all'] = array(
      'title' => 'all',
      'page callback' => 'budgets_supplier_list_by_zone',
      'page arguments' => array(1),
      'access callback' => 'guifi_zone_access_callback',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK
    );
    $items['node/%guifi_zone/suppliers/caps_services=isp'] = array(
      'title' => 'isp',
      'page callback' => 'budgets_supplier_list_by_zone',
      'page arguments' => array(1,3),
      'access callback' => 'guifi_zone_access_callback',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK
    );
    $items['node/%guifi_zone/suppliers/role=professional'] = array(
      'title' => 'professional',
      'page callback' => 'budgets_supplier_list_by_zone',
      'page arguments' => array(1,3),
      'access callback' => 'guifi_zone_access_callback',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK
    );
    $items['node/%guifi_zone/suppliers/role=volunteer'] = array(
      'title' => 'volunteer',
      'page callback' => 'budgets_supplier_list_by_zone',
      'page arguments' => array(1,3),
      'access callback' => 'guifi_zone_access_callback',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK
    );
  }
  $items['node/%guifi_zone/view/userqueue'] = array(
    'title' => 'users queue',
    'page callback' => 'guifi_users_queue',
    'page arguments' => array(1),
    'access callback' => 'guifi_zone_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_zone/view/ipv4/add'] = array(
    'title' => 'add ipv4 network',
    'page callback' => 'guifi_ipv4_add',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('administer guifi networks'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/ipv4/%/edit'] = array(
    'title' => 'edit ipv4 network',
    'page callback' => 'guifi_ipv4_edit',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer guifi networks'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/ipv4/%/delete'] = array(
    'title' => 'delete ipv4 network',
    'page callback' => 'guifi_ipv4_delete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer guifi networks'),
    'type' => MENU_CALLBACK
  );

  // node (location) menus

    $items['node/%guifi_location/view/nodedata'] = array(
    'title' => 'data',
    'page callback' => 'theme_guifi_location_data',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  
  $items['node/%guifi_location/view/distances'] = array(
    'title' => 'distances',
    'page callback' => 'guifi_location_distances',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/distancesmap'] = array(
    'title' => 'profiles map',
    'page callback' => 'guifi_location_distances_map',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/nodeservices'] = array(
    'title' => 'services',
    'page callback' => 'theme_guifi_services_list',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/devices'] = array(
    'title' => 'devices',
    'page callback' => 'theme_guifi_location_devices_list',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/links'] = array(
    'title' => 'links',
    'page callback' => 'theme_guifi_location_links',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/graphs'] = array(
    'title' => 'graphs',
    'page callback' => 'theme_guifi_location_graphs_overview',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/view/users'] = array(
    'title' => 'users',
    'page callback' => 'guifi_users_node_list',
    'page arguments' => array(1),
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_location/user/add'] = array(
    'page callback' => 'guifi_user_add',
    'page arguments' => 1,
    'access callback' => 'guifi_location_access_callback',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  $items['guifi/user/%/edit'] = array(
    'page callback' => 'guifi_user_edit',
    'page arguments' => array(2),
    'access callback' => 'guifi_user_access',
    'access arguments' => array('update', 2),
    'type' => MENU_CALLBACK
  );
  $items['guifi/user/%/delete'] = array(
    'page callback' => 'guifi_user_delete',
    'page arguments' => array(2),
    'access callback' => 'guifi_user_access',
    'access arguments' => array('update', 2),
    'type' => MENU_CALLBACK
  );

  // service menus

  $items['node/%guifi_service/view/servicedata'] = array(
    'title' => 'data',
    'page callback' => 'theme_guifi_service_data',
    'page arguments' => array(1),
    'access callback' => 'guifi_service_access_callback',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK
  );
// TODO:
/*
  $items['node/%guifi_service/view/proxyusers'] = array(
    'title' => 'users',
    'page callback' => 'guifi_users_node_list',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('create guifi nodes'),
    'type' => MENU_LOCAL_TASK
  );
*/

//  TODO: To be deleted in the future to avoid include in the robots.txt
// exclusion lists. In the future, will be /guifi/export/<service>/<export_type>
  $items['node/%guifi_service/view/passwd'] = array(
    'title' => 'passwd',
    'page callback' => 'guifi_users_dump_passwd',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['node/%guifi_service/view/federated'] = array(
    'title' => 'federated',
    'page callback' => 'guifi_users_dump_federated',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['node/%guifi_service/view/federated_md5'] = array(
    'title' => 'federated_md5',
    'page callback' => 'guifi_users_dump_federated_md5',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['node/%guifi_service/view/ldif'] = array(
    'title' => 'ldif',
    'page callback' => 'guifi_users_dump_ldif',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
   );

   // New menu entries to substitute old entries
   $items['guifi/export/%guifi_service/passwd'] = array(
    'title' => 'passwd',
    'page callback' => 'guifi_users_dump_passwd',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
   $items['guifi/export/%guifi_service/federation'] = array(
    'title' => 'federation',
    'page callback' => 'dump_guifi_proxy_federation',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/export/%guifi_service/federated'] = array(
    'title' => 'federated',
    'page callback' => 'guifi_users_dump_federated',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/export/%guifi_service/federated_md5'] = array(
    'title' => 'federated_md5',
    'page callback' => 'guifi_users_dump_federated_md5',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/export/%guifi_service/ldif'] = array(
    'title' => 'ldif',
    'page callback' => 'guifi_users_dump_ldif',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
   );



/*
   $items['guifi'] = array(
     'title' => 'guifi menu page',
     'page callback' => 'guifi_main',
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
     'type' => MENU_LOCAL_TASK
   ); */

  // Devices menus
  $items['guifi/device/add/%guifi_location/%'] = array(
    'title' => 'add device',
    'page callback' => 'guifi_device_add',
//     'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('create guifi nodes'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/device/%guifi_device'] = array(
    'title' => 'view device',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['guifi/device/%guifi_device/edit'] = array(
    'title' => 'edit device',
    'page callback' => 'guifi_device_edit',
    'page arguments' => array(2),
    'access callback' => 'guifi_device_access',
    'access arguments' => array('update', 2),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/delete'] = array(
    'title' => 'delete device',
    'page callback' => 'guifi_device_delete',
    'page arguments' => array(2),
    'access callback' => 'guifi_device_access',
    'access arguments' => array('update', 2),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/'] = array(
    'title' => 'all',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/unsolclic'] = array(
    'title' => 'unsolclic',
    'page callback' => 'guifi_unsolclic',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/services'] = array(
    'title' => 'services',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/interfaces'] = array(
    'title' => 'interfaces',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/data'] = array(
    'title' => 'data',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/comment'] = array(
    'title' => 'comment',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/graphs'] = array(
    'title' => 'graphs',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/links'] = array(
    'title' => 'links',
    'page callback' => 'guifi_device_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/device/%guifi_device/view/traceroute'] = array(
    'title' => 'traceroute',
    'page callback' => 'guifi_device_traceroute',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('create guifi nodes'),
    'type' => MENU_LOCAL_TASK
  );
  // Domain menus
  $items['guifi/domain/add/%guifi_service/%'] = array(
    'title' => 'add domain',
    'page callback' => 'guifi_domain_add',
//     'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('create guifi nodes'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/domain/%guifi_domain'] = array(
    'title' => 'view domain',
    'page callback' => 'guifi_domain_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['guifi/domain/%guifi_domain/edit'] = array(
    'title' => 'edit domain',
    'page callback' => 'guifi_domain_edit',
    'page arguments' => array(2),
    'access callback' => 'guifi_domain_access',
    'access arguments' => array('update', 2),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/domain/%guifi_domain/delete'] = array(
    'title' => 'delete domain',
    'page callback' => 'guifi_domain_delete',
    'page arguments' => array(2),
    'access callback' => 'guifi_domain_access',
    'access arguments' => array('update', 2),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/domain/%guifi_domain/view/'] = array(
    'title' => 'all',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/domain/%guifi_domain/view/data'] = array(
    'title' => 'data',
    'page callback' => 'guifi_domain_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/domain/%guifi_domain/view/hosts'] = array(
    'title' => 'hosts',
    'page callback' => 'guifi_domain_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['guifi/domain/%guifi_domain/view/delegations'] = array(
    'title' => 'delegations',
    'page callback' => 'guifi_domain_print',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  // AHAH Calls
  $items['guifi/js/edit_cableconn'] = array(
    'title' => 'Javascript Edit Cable Connection',
    'page callback' => 'guifi_ahah_edit_cableconn',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/edit_subnet'] = array(
    'title' => 'Javascript Edit Subnetwork',
    'page callback' => 'guifi_ahah_edit_subnet',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add_wds'] = array(
    'title' => 'Javascript Add WDS',
    'page callback' => 'guifi_ahah_add_wds',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/firmware_by_model'] = array(
    'title' => 'Javascript Select Firmware by Model',
    'page callback' => 'guifi_ahah_select_firmware_by_model',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/channel/%'] = array(
    'title' => 'Javascript Select Channel by protocol',
    'page callback' => 'guifi_ahah_select_channel',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-zone/%'] = array(
    'title' => 'Javascript Select Zone',
    'page callback' => 'guifi_ahah_select_zone',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-user/%'] = array(
    'title' => 'Javascript Select User',
    'page callback' => 'guifi_ahah_select_user',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-device/%'] = array(
    'title' => 'Javascript Select Device',
    'page callback' => 'guifi_ahah_select_device',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-device-interfacename/%'] = array(
    'title' => 'Javascript Select Device Interface name',
    'page callback' => 'guifi_ahah_select_device_interfacename',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/delete-ipv4/%'] = array(
    'title' => 'Javascript Delete IPv4',
    'page callback' => 'guifi_ahah_delete_ipv4',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-device-interface/%'] = array(
    'title' => 'Javascript Select Device Interface',
    'page callback' => 'guifi_ahah_select_device_interface',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-remoteipv4/%'] = array(
    'title' => 'Javascript Add Remote IPv4 for a given Subnet',
    'page callback' => 'guifi_ahah_add_remoteipv4',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/ahah_helper_demo'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ahah_helper_demo_form'),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  $items['guifi/js/select-node/%'] = array(
    'title' => 'Javascript Select Node',
    'page callback' => 'guifi_ahah_select_node',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-node-device/%'] = array(
    'title' => 'Javascript Select Device by node/zone/device nickname',
    'page callback' => 'guifi_ahah_select_node_device',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-service/%/%'] = array(
    'title' => 'Javascript Select Service',
    'page callback' => 'guifi_ahah_select_service',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-server/%'] = array(
    'title' => 'Javascript Select Server',
    'page callback' => 'guifi_ahah_select_server',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/move-device/%'] = array(
    'title' => 'Javascript Move Device',
    'page callback' => 'guifi_ahah_move_device',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-interface'] = array(
    'title' => 'Javascript Add Interface',
    'page callback' => 'guifi_ahah_add_interface',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-vinterface/%'] = array(
    'title' => 'Javascript Add Virtual Interface',
    'page callback' => 'guifi_ahah_add_vinterface',
    'page_arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-subnet-mask/%'] = array(
    'title' => 'Javascript Add Public Subnetwork Mask',
    'page callback' => 'guifi_ahah_add_subnet_mask',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-radio'] = array(
    'title' => 'Javascript Add Wireless Radio',
    'page callback' => 'guifi_ahah_add_radio',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-ipv4s/%'] = array(
    'title' => 'Javascript Add IPv4 subnet (public/private or existing)',
    'page callback' => 'guifi_ahah_add_ipv4s',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/select-device-subnets'] = array(
    'title' => 'Javascript select device subnets',
    'page callback' => 'guifi_ahah_select_device_subnets',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['guifi/js/add-cable-link/%'] = array(
    'title' => 'Javascript Add Cable Link',
    'page callback' => 'guifi_ahah_add_cable_link',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Export formats

  $items['guifi/cnml/%'] = array(
    'title' => 'export zone in CNML format',
    'page callback' => 'guifi_cnml',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/cnml/%/%'] = array(
    'title' => 'export zone in CNML format',
    'page callback' => 'guifi_cnml',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/csvproxy/%'] = array(
    'title' => 'export zone proxy services in csv format',
    'page callback' => 'guifi_csvproxy',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'file' => 'guifi_csvproxy.inc.php',
    'type' => MENU_CALLBACK
  );

//  $items['guifi/nodexchange/%'] = array(
//    'title' => 'export zone in nodeXchange format',
//    'page callback' => 'guifi_nodexchange',
//    'page arguments' => array(2),
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK
//  );
//  $items['guifi/nodexchange/%/%'] = array(
//    'title' => 'export zone in nodeXchange format',
//    'page callback' => 'guifi_nodexchange',
//    'page arguments' => array(2, 3),
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK
//  );
  $items['guifi/gml/%'] = array(
    'title' => 'export zone in gml format',
    'page callback' => 'guifi_gml',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/gml/%/%'] = array(
    'title' => 'export zone in gml format',
    'page callback' => 'guifi_gml',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/mrtg/%'] = array(
    'title' => 'generate mrtg config file',
    'page callback' => 'guifi_mrtg',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['guifi/networks'] = array(
    'title' => 'networks',
    'page callback' => 'guifi_networks_list',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
     'type' => MENU_CALLBACK
  );
  $items['guifi/graph_detail'] = array(
    'title' => 'display detailed node graphs',
    'page callback' => 'guifi_graph_detail',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // General guifi menu
  $items['api'] = array(
     'title' => 'guifi.net API',
     'description' => 'Public API for guifi.net network management',
     'page callback' => 'guifi_api',
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK
  );

  // Spatial searches
  $items['guifi/spatialsearch'] = array(
     'title' => 'spatial search',
     'description' => 'Callback function for quick GIS searches (output in JSON format)',
     'page callback' => 'guifi_spatialsearch',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 * Initialization hook: Load stylesheet.
 */

function guifi_init() {
  drupal_add_css(drupal_get_path('module', 'guifi') .'/guifi.css');
  if (module_exists('event'))
    drupal_add_css(drupal_get_path('module', 'event') .'/event.css');
}

function guifi_zone_root() {
  $root = db_query(
    "SELECT id " .
    "FROM {guifi_zone} " .
    "WHERE master = 0")->fetchObject();
  return $root->id;

}

function guifi_nodeapi($node, $op, $arg = 0) {
  switch ($op) {
//    case 'load':
//    case 'insert':
//    case 'update':
//    case 'delete':
//    case 'delete revision':
//    case 'validate':
//    case 'rss item':
    case 'search result':
      return guifi_search_result($node);
    case 'update index':
      return guifi_update_index($node);
  }
}

function guifi_search_result($node = FALSE) {
  switch ($node->type) {
    case 'guifi_location':
      $extra = l(guifi_img_icon('wifi.png'), 'node/'. $node->nid .'/view',
        array(
          'attributes' => array('title' => t('View node %node at %zone',
            array('%node' => $node->nick, '%zone' => guifi_get_zone_name($node->zone_id)))),
          'html' => TRUE)) .
        l(guifi_img_icon('globe.png'), 'node/'. $node->zone_id .'/view/map',
        array('html' => TRUE,
          'attributes' => array('title' => t('View map for %zone', array('%zone' => guifi_get_zone_name($node->zone_id))))));
      $qry = db_query('SELECT s.service_type, s.id, s.nick FROM {guifi_services} s, {guifi_devices} d WHERE d.nid :nid AND s.device_id=d.id', array(':nid' => $node->nid));
      while ($s = $qry->fetchObject()) {
        $sextra[] = l(strtoupper($s->service_type), 'node/'. $s->id .'/view', array('attributes' => array('title' => $s->nick)));
      }
      if (count($sextra))
        $extra .= l(guifi_img_icon('service.png'), 'node/'. $node->nid .'/view/nodeservices',
        array(
          'attributes' => array('title' => t('View services for node %node at %zone',
            array('%node' => $node->nick, '%zone' => guifi_get_zone_name($node->zone_id)))),
          'html' => TRUE)) .' - '.
          implode('·', $sextra);
      return $extra;
    case 'guifi_zone':
      $extra = l(guifi_img_icon('globe.png'), 'node/'. $node->nid .'/view/map',
        array('html' => TRUE,
          'attributes' => array('title' => t('View map of %zone', array('%zone' => $node->title)))));
      $qry = db_query('SELECT s.service_type, s.id FROM {guifi_services} s WHERE s.zone_id = :zid', array(':zid' => $node->zone_id));
      while ($s = $qry->fetchObject()) {
        $sextra[] = l(strtoupper($s->service_type), 'node/'. $s->id .'/view', array('attributes' => array('title' => $s->nick)));
      }
      if (count($sextra))
        $extra .= l(guifi_img_icon('service.png'), 'node/'. $node->nid .'/view/zoneservices',
        array(
          'attributes' => array('title' => t('View services for %zone',
            array('%zone' => $node->title))),
          'html' => TRUE)) .' - '.
          implode('·', $sextra);
      return $extra;
    case 'guifi_service':
      return l(guifi_img_icon('service.png'), 'node/'. $node->nid .'/view/servicedata',
        array('html' => TRUE,
          'attributes' => array('title' => t('View %type service at %zone',
            array('%type' => $node->service_type, '%zone' => guifi_get_zone_name($node->zone_id)))))) .' - '.
        strtoupper($node->service_type);
  }

}

function guifi_update_index($node = FALSE) {
  if (!$node->nid)
    return;

  $index = '<h1>'. $node->nid .'</h1><h1>'. $node->nick .'</h1><h3>'. $node->title .'</h3>';
  if ($node->type == 'guifi_location') {
    $qry = db_query('SELECT * FROM {guifi_users} WHERE nid = :nid', array(':nid' => $node->nid));
    while ($u = $qry->fetchObject())
      $index .= '<h2>'. $u->username .'</h2>'.
        '<h2>'. $u->firstname .'</h2>'.
        '<h2>'. $u->lastname .'</h2>';
  }
  return $index;
}



/** info hook.
 */
function guifi_node_info() {
  return array(
    'guifi_zone' => array(
      'name' => t('guifi.net zone'),
      'base' => 'guifi_zone',
      'description' => t("Create a community, area or zone. A typical zone hierarchy can be related to the territory (Country/Region/City...) but not have to, i.e. a single city can have many groups or communities with distinct IP addressing policies.<br />Every zone will have it's own page so it can be used as the homepage of that community.<br />The zones must belong at least to the root zone, but can also belong to other zones, so in that way a hierarchy is created.<br />Every zone have its own properties like maps or ip ranges and every node will have to be assigned to an existing zone, and will inherit the zone properties like his IP address and drawn in the corresponding map.<br />If zone properties are leaved blank, will inherit the parent zone properties."),
      'has_title' => TRUE,
      'title_label' => t('Zone name'),
    ),
    'guifi_location' => array(
      'name' => t('guifi.net node'),
      'base' => 'guifi_location',
      'description' => t("Create a node. A node is a physical location " .
        "(will be dynamically drawed on the maps using lat/lon coordinates) " .
        "where there are network devices, servers, etc.<br />" .
        "Every node have to be assigned to a guifi zone."),
      'has_title' => TRUE,
      'title_label' => t('Location name'),
    ),
    'guifi_service' => array(
      'name' => t('guifi.net service'),
      'base' => 'guifi_service',
      'description' => t("Create a service. A service is any resource available on the network that should be listed in the content directory of the site, like a web server, internet proxy,ntp, instant messaging, voip gateway, etc... ."),
      'has_title' => TRUE,
      'title_label' => t('Service name'),
    ),
  );
}

/** help hook
 */
function guifi_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Manage the guifi.net, a mesh network community.');
    case 'admin/guifi':
      return t('Select an operation from the menus to manage zones.');
    case 'admin/guifi/zone/add':
      return t('Enter de zone information.');
    case 'node/add#guifi_location':
      return t("Create a node. A node is a physical location (will be dynamically drawed on the maps using lat/lon coordinates) where there are network devices, servers, etc.<br />Every node have to assigned to a guifi zone.");
    case 'node/add#guifi_zone':
      return t("Create a community, area or zone. A typical zone hierarchy can be related to the territory (Country/Region/City...) but not have to, i.e. a single city can have many groups or communities with distinct IP addressing policies.<br />Every zone will have its own page so it can be used as the homepage of that community.<br />The zones must belong at least to the root zone, but can also belong to other zones, so in that way a hierarchy is created.<br />Every zone have its own properties like maps or ip ranges and every node will have to be assigned to an existing zone, and will inherit the zone properties like its IP address and will be drawn in the corresponding map.<br />If zone properties are leaved blank, will inherit the parent zone properties.");
    case 'node/add#guifi-service':
      return t("Create a service. A service is any resource available on the network that should be listed in the content directory of the site, like a web server, internet proxy,ntp, instant messaging, voip gateway, etc... .");
  }
}

/**
 * Implementation of hook_permission().
 */
function guifi_permission() {
  return array(
    'administer guifi zones' => array(
      'title' => t('Administer guifi zone'),
    ),
    'administer guifi networks' => array(
      'title' => t('Administer guifi networks'),
    ),
    'administer guifi users' => array(
      'title' => t('Administer guifi users'),
    ),
    'administer guifi dns' => array(
      'title' => t('Administer DNS domains'),
    ),
    'guifi module developer' => array(
      'title' => t('guifi developer options'),
    ),
    'create guifi zones' => array(
      'title' => t('Create guifi zones'),
    ),
    'create guifi nodes' => array(
      'title' => t('Create guifi nodes'),
    ),
    'create guifi dns' => array(
      'title' => t('Create DNS domains'),
    ),
    'edit own guifi zones' => array(
      'title' => t('Edit own guifi zones'),
    ),
    'edit own guifi nodes' => array(
      'title' => t('Edit own guifi nodes'),
    ),
    'edit own guifi dns' => array(
      'title' => t('Edit own DNS domains'),
    ),
  );
}

function guifi_admin_settings() {
  global $user;

  $form_weight = -20;

  $form['guifi_license'] = array(
    '#type' => 'textarea',
    '#title' => t('License agreement'),
    '#default_value' => variable_get("guifi_license", t("By creating this node, you accept the <a href=\"http://guifi.net/WirelessWCL_EN\">Wireless commons license.</a><br />Note that this database is intended for supporting a real network. It will assign ip addresses and show the network information in various formats, so might be <b>not</b> the right place for submitting ficticious data or just have fun. If you want to run tests or do some self training, be sure you are doing it at some of the <a href=\"http://test.guifi.net\">test sites</a>.<br />Your access to this site might be banned or your data might be deleted if inappropiate use is detected.")
    .("<br />You will be always responsible of the information you give, agree to make it publicly available and you will be able to modify or delete it, network administrators can also update or delete your data.<br />If you want to promote your role within the community you can ask for it contacting the current administrators and they will grant the privileges that you qualify for.")),
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t("Agreement &#038; help message when creating new nodes, users will not be able to create nodes unless they accept this message."),
    '#weight' => $form_weight++,
  );
  $form['guifi_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_title", t("Network statistics")),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("Title of guifi block..."),
    '#weight' => $form_weight++,
  );
  $form['guifi_forums'] = array(
    '#type' => 'textfield',
    '#title' => t('Forums'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_forums", 'forum'),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("URL for the forums, leave it blank if none."),
    '#weight' => $form_weight++,
  );
  $form['guifi_faq'] = array(
    '#type' => 'textfield',
    '#title' => t('FAQ root page'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_faq", ''),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("URL for FAQ, leave it blank if none."),
    '#weight' => $form_weight++,
  );
  $form['guifi_docs'] = array(
    '#type' => 'textfield',
    '#title' => t('Documentation'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_docs", ''),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("URL for the Guide/Documentation of how to use this site, leave it blank if none."),
    '#weight' => $form_weight++,
  );
  $form['guifi_pagelimit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit of items listed on every page'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_pagelimit", 50),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Number of rows to be displayed as default on every page report..."),
    '#weight' => $form_weight++,
  );
  $form['guifi_contact'] = array(
    '#type' => 'textfield',
    '#title' => t('Default contact'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_contact", $user->mail),
    '#size' => 55,
    '#maxlength' => 255,
    '#description' => t("An email will be submitted to this address when no contact address is present."),
    '#weight' => $form_weight++,
  );
  $form['guifi_notify_period'] = array(
    '#type' => 'select',
    '#title' => t('Send notifications every'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_notify_period", 86400),
    '#options' => array(
      -1 => t('Never (disabled)'),
      0 => t('Every cron'),
      3600 => t('Hourly'),
      72000 => t('Every 2 hours'),
      21600 => t('Every 6 hours'),
      43200 => t('Every 12 hours'),
      86400 => t('Daily'),
      172800 => t('Every other day'),
      604800 => t('Weekly')),
    '#description' => t('When the notification messages queue will be delivered, if set to "Never", no messages will be post at the queue.'),
    '#weight' => $form_weight++,
  );
  $form['guifi_loadstats_period'] = array(
    '#type' => 'select',
    '#title' => t('Load statsitics every'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_loadstats_period", 86400),
    '#options' => array(
      -1 => t('Never (disabled)'),
      0 => t('Every cron'),
      3600 => t('Hourly'),
      72000 => t('Every 2 hours'),
      21600 => t('Every 6 hours'),
      43200 => t('Every 12 hours'),
      86400 => t('Daily'),
      172800 => t('Every other day'),
      604800 => t('Weekly')),
    '#description' => t('When the graphs servers will be asked for providing statistics.'),
    '#weight' => $form_weight++,
  );
  $form['hotspot_ssid'] = array(
    '#type' => 'textfield',
    '#title' => t('Hotspot SSID'),
    '#required' => FALSE,
    '#default_value' => variable_get("hotspot_ssid", t("HotSpot")),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("SSID name for the hotspot open access for guests"),
    '#weight' => $form_weight++,
  );
  $form['guifi_loglevel'] = array(
    '#type' => 'select',
    '#title' => t('Log level'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_loglevel", 0),
    '#options' => array(0 => 'None', 1 => 'Basic', 2 => 'Trace', 3 => 'Full', 4 => 'MIQUEL'),
    '#description' => t('Trace log level to screen:<ol><li><em>None</em>, normal operation</li><li><em>Basic</em>, general messages</li><li><em>Trace</em>, provides follow-up of functions being executed (for developers)</li><li><em>Full</em>, dumps variable values (very long, for fine debug)</li></ol>Change the log level to figure out whats happening.'),
    '#weight' => $form_weight++,
  );
  $form['guifi_gmap_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Key for Google Maps API'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_gmap_key", ''),
    '#size' => 80,
    '#maxlength' => 1024,
    '#description' => t("If not present, Google Maps API will be disabled.<br />Get it at: ") .
       '<a href="http://code.google.com/apis/maps/signup.html">'.
          'http://code.google.com/apis/maps/signup.html'.'</a>',
    '#weight' => $form_weight++,
  );
  $form['guifi_wms_service'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for WMS service'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_wms_service", 'http://guifi.net/cgi-bin/mapserv?map=/var/www/maps.guifi.net/guifimaps/GMap.map'),
    '#size' => 80,
    '#maxlength' => 1024,
    '#description' => t("URL to call to get WMS guifi mapping services"),
    '#weight' => $form_weight++,
  );
  $form['guifi_maps'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for maps module'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_maps", 'http://maps.guifi.net'),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("Base URL for the mapping GIS application (guifimaps)"),
    '#weight' => $form_weight++,
  );
  $form['guifi_decimal'] = array(
    '#type' => 'textfield',
    '#title' => t('Decimal separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_decimal", ','),
    '#size' => 1,
    '#maxlength' => 1,
    '#description' => t("Decimal character for formatting numbers"),
    '#weight' => $form_weight++,
  );
  $form['guifi_thousand'] = array(
    '#type' => 'textfield',
    '#title' => t('Thousands separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_thousand", '.'),
    '#size' => 1,
    '#maxlength' => 1,
    '#description' => t("Thousands separator for formatting numbers"),
    '#weight' => $form_weight++,
  );


  return system_settings_form($form);
}


function guifi_block($op = "list", $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks[0] = array('info' => t(variable_get("guifi_title", t("network facts"))),
      'weight' => 0, 'status' => 1, 'region' => 'left');
      return $blocks;
    case 'configure':
      $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('guifi_block_items', 0),
      '#options' => array('1', '2', '3'),
      );
      return $form;
    case 'save':
      variable_set('guifi_block_items', $edit['items']);

    case 'view':
      switch ($delta) {
        case 0:
          $block['subject'] = t(variable_get("guifi_title", "<a href=\"guifi\">". t("List of guifi nodes") ."</a>"));
          $block['content'] = guifi_display_block_1();
          break;
      }
      return $block;
  }
}

function guifi_counters_block() {
  $oGC = new GeoCalc();
  $dTotals = array();

  $btime = microtime(TRUE);
  $tnodes = db_query('
    SELECT
    status_flag, count(*) c
    FROM {guifi_location}
    GROUP BY status_flag ORDER BY C DESC');
  $str = '';
  $rows = array();
  $totals = 0;
  while ($summary = $tnodes->fetchObject()) {
    $rows[] = array(
      t($summary->status_flag),
      array(
        'data' =>
        number_format(
          $summary->c,
          0,
          NULL,
          variable_get(
            'guifi_thousand',
          ',')
        ),
        'class' => $summary->status_flag));
    $totals = $totals + $summary->c;
  }
  $header = array(
    t('Nodes'),
    '<p align="right">'.
    number_format(
      $totals,
      0,
      NULL,
      variable_get('guifi_thousand', '.')
    ) .'</p>');
  $content = theme('table', $header, $rows);
  $content .= '<div class="more-link">'.
    l(t('node list and maps...'),
      'node/'. guifi_zone_root(),
      array(
        'title' => t('Go to the list of nodes root page and their maps.'))) .'</div>';
  $ntime = microtime(TRUE);
  $content .= t('Node counters obtained in %secs seconds',
    array('%secs' => number_format(($ntime - $btime), 4)));

  // link statistics
  $qlinks = db_query('
    SELECT
    l1.id, n1.id nid1, n2.id nid2, l1.link_type, n1.lat lat1,
    n1.lon lon1, n2.lat lat2, n2.lon lon2
    FROM guifi_links l1
    LEFT JOIN guifi_links l2 ON l1.id=l2.id
    LEFT JOIN guifi_location n1 ON l1.nid=n1.id
    LEFT JOIN guifi_location n2 ON l2.nid=n2.id
  WHERE l1.nid != l2.nid AND l1.device_id != l2.device_id');
  unset($listed);
  while ($link = $qlinks->fetchObject()) {
    if (!isset($listed[$link->id]) )
      $listed[$link->id] = $link;
    else
      continue;
    $d =
      round($oGC->EllipsoidDistance(
        $link->lat1,
        $link->lon1,
        $link->lat2,
        $link->lon2),
        1);
    switch ($link->link_type) {
      case 'wds': $type=t('PtP link'); break;
      case 'ap/client': $type=t('ap/client'); break;
      default: $type=t('unknown');
    }
    if ($d < 100) {
      $dTotals[$type]['dTotal'] += $d;
      $dTotals[$type]['count'] ++;
    }
    else
      guifi_log(GUIFILOG_TRACE, sprintf('Probable DISTANCE error between nodes (%d and %d) %d kms.',
        $link->nid1,
        $link->nid2,
        $d));
  }

  unset($rows);
  $rows=array();
  if (count($dTotals)) foreach ($dTotals as $key => $dTotal)
  if ($dTotal['dTotal']) {
    $rows[] = array(
      $key,
      array(
        'data' => number_format(
          $dTotal['count'],
          0,
          NULL,
          variable_get('guifi_thousand', '.')),
          'align' => 'right'),
          array(
            'data' => number_format(
              $dTotal['dTotal'],
              2,
              variable_get('guifi_decimal', ','),
              variable_get('guifi_thousand', '.')),
              'align' => 'right')
    );
    $lcount += $dTotal['count'];
    $ldTotal += $dTotal['dTotal'];
  }
  if ($lcount)
    $rows[] = array(
      '<strong>'. t('Total') .'</strong>',
      array(
        'data' => number_format(
          $lcount,
          0,
          NULL,
          variable_get('guifi_thousand', '.')),
          'align' => 'right'),
          array(
            'data' => number_format(
              $ldTotal,
              2,
              variable_get('guifi_decimal', ','),
              variable_get('guifi_thousand', '.')),
              'align' => 'right')
    );
  $content .= theme(
    'table',
    array(t('Wireless<br />links'),
      '<p align="right">#</p>', t('kms.')), $rows);

  $content .= t('Link counters obtained in %secs seconds',
    array('%secs' => number_format((microtime(TRUE) - $ntime), 4)));

  return $content;
}


function guifi_display_block_1() {
  $oGC = new GeoCalc();
  $dTotals = array();

    $tnodes = db_query('
      SELECT
        status_flag, count(*) c
      FROM {guifi_location}
      GROUP BY status_flag ORDER BY C DESC');
    $str = '';
    $rows = array();
    $totals = 0;
    while ($summary = $tnodes->fetchObject()) {
      $rows[] = array(
        t($summary->status_flag),
        array(
          'data' =>
            number_format(
              $summary->c,
              0,
              NULL,
              variable_get(
                'guifi_thousand',
                ',')
            ),
            'class' => $summary->status_flag));
      $totals = $totals + $summary->c;
    }
    $header = array(
      t('Nodes'),
      '<p align="right">'.
        number_format(
          $totals,
          0,
          NULL,
          variable_get('guifi_thousand', '.')
        ) .'</p>');
    $content = theme('table', $header, $rows);
    $content .= '<div class="more-link">'.
      l(t('node list and maps...'),
        'node/'. guifi_zone_root(),
        array(
          'title' => t('Go to the list of nodes root page and their maps.'))) .'</div>';

    $qlinks = db_query('
      SELECT
        l1.id, n1.id nid1, n2.id nid2, l1.link_type, n1.lat lat1,
        n1.lon lon1, n2.lat lat2, n2.lon lon2
      FROM guifi_links l1
        LEFT JOIN guifi_links l2 ON l1.id=l2.id
        LEFT JOIN guifi_location n1 ON l1.nid=n1.id
        LEFT JOIN guifi_location n2 ON l2.nid=n2.id
      WHERE l1.nid != l2.nid AND l1.device_id != l2.device_id');
    unset($listed);
    while ($link = $qlinks->fetchObject()) {
      if (!isset($listed[$link->id]) )
        $listed[$link->id] = $link;
      else
        continue;
      $d =
        round($oGC->EllipsoidDistance(
          $link->lat1,
          $link->lon1,
          $link->lat2,
          $link->lon2),
          1);
      switch ($link->link_type) {
        case 'wds': $type=t('PtP link'); break;
        case 'ap/client': $type=t('ap/client'); break;
        default: $type=t('unknown');
      }
      if ($d < 100) {
        $dTotals[$type]['dTotal'] += $d;
        $dTotals[$type]['count'] ++;
      }
      else
       guifi_log(GUIFILOG_TRACE, sprintf('Probable DISTANCE error between nodes (%d and %d) %d kms.',
        $link->nid1,
        $link->nid2,
        $d));
    }

    unset($rows);
    $rows=array();
    if (count($dTotals)) foreach ($dTotals as $key => $dTotal)
    if ($dTotal['dTotal']) {
      $rows[] = array(
        $key,
        array(
          'data' => number_format(
            $dTotal['count'],
            0,
            NULL,
            variable_get('guifi_thousand', '.')),
          'class' => 'num'),
        array(
          'data' => number_format(
            $dTotal['dTotal'],
            0,
            variable_get('guifi_decimal', ','),
            variable_get('guifi_thousand', '.')),
          'class' => 'kms')
        );
      $lcount += $dTotal['count'];
      $ldTotal += $dTotal['dTotal'];
    }
    if ($lcount)
      $rows[] = array(
        '<strong>'. t('Total') .'</strong>',
        array(
          'data' => number_format(
            $lcount,
            0,
            NULL,
            variable_get('guifi_thousand', '.')),
          'class' => 'tnum'),
        array(
          'data' => number_format(
            $ldTotal,
            0,
            variable_get('guifi_decimal', ','),
            variable_get('guifi_thousand', '.')),
          'class' => 'tkms')
      );
    $content .= theme(
      'table',
      array(t('Wireless<br />links'),
        '<p align="right">#</p>', t('kms.')), $rows,array('class'=>'guifi_stats'));

    //history chart
    $content .= '<br /><a href="'. base_path() .'guifi/menu/stats/nodes"><img src="'. base_path() .'guifi/cnml/1/plot"></a>';
    return $content;
}


function guifi_node_view($node, $view_mode, $langcode) {

  switch ($node->type) {
    case 'node':
    case 'guifi_zone':
    $links['cnml'] = array(
              'title' => t('CNML'),
              'attributes' => array('title' => t('export zone in CNML format')),
              'href' => "guifi/cnml/$node->nid",
            );

    // TODO MIQUEL
    // REMOVE FINALLY!
    /*
    $links['guifiproxy'] = array(
              'title' => t('guifiproxy'),
              'attributes' => array('title' => t('export zone proxy services in csv format')),
              'href' => "guifi/csvproxy/$node->nid",
            );
    */

    $links['gml'] = array(
              'title' => t('GML'),
              'attributes' => array('title' => t('export zone in GML format')),
              'href' => "guifi/gml/$node->nid",
            );

    if (module_exists('budgets')) {
      $links['budgets'] = array(
                'title' => t('budgets'),
                'attributes' => array('title' => t('view budgets for this zone')),
                'href' => "budgets/$node->nid/list",
              );
    }
      break;
    case 'node':
    case 'guifi_location':
    $links['cnml'] = array(
              'title' => t('CNML'),
              'attributes' => array('title' => t('export zone in CNML format')),
              'href' => "guifi/cnml/$node->nid",
            );
      break;
  }

  $node->content['links']['guifi_zone'] = array(
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
  );
}


function guifi_page($full = FALSE) {

  $blocks = array();
  
  if ($menus = db_query(
    "SELECT menu_name, mlid " .
    "FROM {menu_links} " .
    "WHERE link_path = 'guifi/menu'" .
    " AND module = 'system'")->fetchAssoc()) {
    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'guifi/menu/help' AND menu_name = :menu_name AND ml.plid = :mlid AND hidden = 0", $menus, array('fetch' => PDO::FETCH_ASSOC));

  foreach ($result as $item) {
      _menu_link_translate($item);
      if (!$item['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item['localized_options']['attributes']['title'])) {
        $item['description'] = $item['localized_options']['attributes']['title'];
        unset($item['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block['content'] = '';
      $block['content'] .= theme('admin_block_content', array('content' => system_admin_menu_block($item)));
      if (!empty($block['content'])) {
        $block['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks[(50000 + $item['weight']) .' '. $item['title'] .' '. $item['mlid']] = $block;
    }
  }
  if ($blocks) {
    ksort($blocks);
    if ($full) {
      print theme('page', theme_guifi_menu_page($blocks), FALSE);
      return;
    }
    return theme_guifi_menu_page($blocks);
  }
  else {
    return t('You do not have any active items.');
  }
}

function guifi_cron() {
  include_once 'guifi_cron.inc.php';

  // Check for sending notifications
  $msg_exp = variable_get('guifi_notify_last', 0) +
    variable_get('guifi_notify_period', 86400);
  if ($msg_exp >= 0)
  if (time() > $msg_exp) {
    guifi_notify_send();
    variable_set('guifi_notify_last', time());
  }

  // Check for loading statistics
  $last_stats = variable_get('guifi_loadstats_last', array());
  $qry = db_query('SELECT id FROM {guifi_services} WHERE service_type = \'SNPgraphs\'');
  while ($graph_server = $qry->fetchObject()) {
    $gs = node_load($graph_server->id);
    if ($gs->var['version'] >= 2.0) {
      if (is_null($last_stats[$graph_server->id]))
        $last_stats[$graph_server->id] = 0;
      if (time() > ($last_stats[$graph_server->id] +
        variable_get('guifi_loadstats_period', 86400))) {
        guifi_cron_loadCNMLstats($graph_server->id);
        $last_stats[$graph_server->id] = time();
        variable_set('guifi_loadstats_last', $last_stats);
      }
    }
  }

  guifi_purge();
}

function print_r_h ($arr) {
        echo '<pre>';
        print_r($arr);
        echo '</pre>';
}
/** check for overlapping routes.
 */
function guifi_overlap_check ( $verbose = FALSE) {
  $tstart = microtime(TRUE);
  $array = array();
  $query = db_query("SELECT ipv4, netmask FROM guifi_ipv4 WHERE ipv4_type = '2' ORDER BY ipv4 ASC");

  while ( $ipv4 = $query->fetchAssoc()) {
    $net = _ipcalc($ipv4['ipv4'],$ipv4['netmask']);
    $array[] = array($net['netid'],$net['netmask']);
  }

  sort($array);
  $network = array();
  $brcst = '';

  foreach ( $array as $key => $netid) {
    $broadcast = $netid[1];
    if($brcst != $broadcast) {
      $network[] = array($netid[0], $netid[1]);
    }
   $brcst = $broadcast;
  }

  $net2 = "";
  $overlapped = array();
  $mask2 ="255.255.255.252";

  while (list($i,$value) = each($network)) {
    $net = $value[0];
    $mask = $value[1];
    $maskbits = _ipcalc($net,$value[1]);
    $maskbits2 = _ipcalc($net2,$mask2);

    if($net2 == $net) {
      drupal_set_message(t('%net/%mask is overlapped by %net2/%mask2!!', array('%net' => $net, '%mask' => $maskbits['maskbits'],'%net2' => $net2, '%mask2' => $maskbits2['maskbits'])));
      $overlapped[] = $net;
    }
    $net2 = $net;
    $mask2 = $mask;
  }

    return t('Database Overlap check in %secs', array('%secs' =>
      number_format(microtime(TRUE)-$tstart, 4)));
}

/** purge orphan data
 */
function guifi_purge($verbose = FALSE) {
  // deleting orphan devices
  unset($del);

  $tstart = microtime(TRUE);

  // delete orphan devices
  $q =db_query('SELECT
                  d.id, d.nick
                FROM {guifi_devices} d
                  LEFT JOIN {guifi_location} n ON d.nid=n.id
                WHERE n.id IS NULL');
  $ndel = 0;
  while ($r = $q->fetchObject()) {
    $to_mail = '';

    $log = _guifi_db_delete('guifi_devices',
        array('id' => $r->id),
        $to_mail);

    $subject = t('The device %name has been DELETED by purge process because was orphan of node.',
      array('%name' => $r->nick));
    drupal_set_message($subject);
    guifi_notify($to_mail,
      $subject,
      $log, $verbose);
    $ndel++;
  }

  if ($verbose) {
    $tdevices = microtime(TRUE);
    drupal_set_message(t('%ndev orphan devices purged in %secs',
      array('%ndev' => $ndel,
        '%secs' => number_format($tdevices-$tstart, 4)
        )));
  }

  // deleting orphan radios

  $q = db_query('SELECT r.id FROM {guifi_radios} r  LEFT JOIN {guifi_devices} d ON r.id=d.id WHERE d.id IS NULL;');
  $rdel = 0;
  while ($r = $q->fetchObject() ) {
_guifi_db_delete('guifi_devices', array('id' => $r->id));
    $subject = t('The Radio id: %id has been DELETED by purge process because was orphan of device.',
      array('%id' => $r->id));
    drupal_set_message($subject);
    $rdel++;
  }

  if ($verbose) {
    $tradios = microtime(TRUE);
    drupal_set_message(t('%radio orphan radios purged in %secs',
      array('%radio' => $rdel,
        '%secs' => number_format($tradios-$tdevices, 4)
        )));
  }


  // deleting orphan interfaces
  $q = db_query('SELECT i.id FROM {guifi_interfaces} i LEFT JOIN {guifi_devices} d ON i.device_id=d.id WHERE d.id IS NULL;');
  $idel = 0;
  while ($r = $q->fetchObject() ) {
_guifi_db_delete('guifi_interfaces', array('id' => $r->id));
    $subject = t('The Interface id: %id has been DELETED by purge process because was orphan of device/radio.',
      array('%id' => $r->id));
    drupal_set_message($subject);
    $idel++;
  }
  if ($verbose) {
    $tint = microtime(TRUE);
    drupal_set_message(t('%interface orphan interfaces purged in %secs',
      array('%interface' => $idel,
        '%secs' => number_format($tint-$tradios, 4)
        )));
  }



  // deleting orphan ip addresses
  $q = db_query('SELECT a.id, a.interface_id FROM {guifi_ipv4} a LEFT JOIN {guifi_interfaces} i ON a.interface_id=i.id WHERE i.id IS NULL;');
  $ipdel = 0;
  while ($r = $q->fetchObject() ) {
_guifi_db_delete('guifi_ipv4', array('id' => $r->id, 'interface_id' => $r->interface_id));
    $subject = t('The IPV4 address: %address has been DELETED by purge process because was orphan of device/radio.',
      array('%address' => $r->ipv4));
    drupal_set_message($subject);
    $ipdel++;
  }
  if ($verbose) {
    $tipv4 = microtime(TRUE);
    drupal_set_message(t('%ipv4 orphan ipv4 purged in %secs',
      array('%ipv4' => $ipdel,
        '%secs' => number_format($tipv4-$tint, 4)
        )));
  }

  // deleting links with no pair
  $q = db_query('SELECT l.id, l.device_id
FROM {guifi_links} l
LEFT JOIN {guifi_links} l2 ON l2.id = l.id
LEFT JOIN {guifi_devices} d ON l.device_id = d.id
LEFT JOIN {guifi_devices} d2 ON l2.device_id = d2.id
WHERE l.device_id != l2.device_id AND (d.id IS NULL OR d2.id IS NULL);');
  $lpdel = 0;
  while ($r = $q->fetchObject() ) {
_guifi_db_delete('guifi_links', array('id' => $r->id, 'device_id' => $r->device_id));
    $subject = t('The UNPAIRED link id: %link has been DELETED by purge process because was orphan of device id %device.',
      array('%link' => $r->id, '%device' => $r->device_id));
    drupal_set_message($subject);
    $lpdel++;
  }
  if ($verbose) {
    $tlink2 = microtime(TRUE);
    drupal_set_message(t('%link unpaired link purged in %secs',
      array('%link' => $lpdel,
        '%secs' => number_format($tlink2-$tipv4, 4)
        )));
  }

  // deleting orphan links
  $q = db_query('SELECT l.id, l.device_id FROM {guifi_links} l LEFT JOIN {guifi_devices} d ON l.device_id=d.id WHERE d.id IS NULL;');
  $ldel = 0;
  while ($r = $q->fetchObject() ) {
_guifi_db_delete('guifi_links', array('id' => $r->id, 'device_id' => $r->device_id));
    $subject = t('The link id: %link has been DELETED by purge process because was orphan of device id %device.',
      array('%link' => $r->id, '%device' => $r->device_id));
    drupal_set_message($subject);
    $ldel++;
  }
  if ($verbose) {
    $tlink = microtime(TRUE);
    drupal_set_message(t('%link orphan link purged in %secs',
      array('%link' => $ldel,
        '%secs' =>  number_format($tlink-$tlink2, 4)
        )));
  }


  // delete orphan users
  $q =db_query('SELECT
                  u.id, u.username
                FROM {guifi_users} u
                  LEFT JOIN {guifi_location} n ON u.nid=n.id
                WHERE n.id IS NULL');
  $udel = 0;
  while ($r = $q->fetchObject() ) {
    $to_mail = '';
    $log = _guifi_db_delete('guifi_users',
        array('id' => $r->id),
        $to_mail);

    $subject = t('The user %name has been DELETED by purge process because was orphan of node.',
      array('%name' => $r->username));
    guifi_notify($to_mail,
      $subject,
      $log, $verbose);
    $udel++;
  }

  if ($verbose) {
    $tdevices = microtime(TRUE);
    drupal_set_message(t('%user orphan users purged in %secs',
      array('%user' => $udel,
        '%secs' => number_format($tdevices-$tstart, 4)
        )));
  }



  if ($verbose)
    return t('Database purgued in %secs', array('%secs' =>
      number_format(microtime(TRUE)-$tstart, 4)));

}

function guifi_update_devices_fromExtraInfo ( $verbose = FALSE) {
  $tstart = microtime(TRUE);
  $array = array();

  // inicialitzem un array amb tots els firmwares indexats per nom
  $firmsByName = guifi_get_AllfirmwaresByName();

  $query = db_query("select id, extra, usc_id, mid, fid   from {guifi_devices}  where (usc_id = 0 or mid = 0 or fid = 0) and extra is not null");

  $to_mail = $user->mail;
  $log ='';

  while ( $device = $query->fetchObject() ) {

    $extraInfo = unserialize($device->extra);
    // comprovem que el nom que tinc a extra correspon amb un id de la taula de firms
    if (array_key_exists($extraInfo['firmware'], $firmsByName)) {
      $params = array(
        'id'=> $device->id,
        'mid'=> $extraInfo['model_id'],
        'fid'=> $firmsByName[$extraInfo['firmware']]
      );
     _guifi_db_sql('guifi_devices',array('id' => $params['id']),$params,$log,$to_mail);
    }
  }
  // actualitzar els camps usc_id dels devices als que els concordin fid i mid amb un usc.id
  db_query("update {guifi_devices} d
        inner join {guifi_configuracioUnSolclic} usc on usc.fid = d.fid and usc.mid = d.mid
        set d.usc_id = usc.id  where d.mid <> 0 and d.fid <> 0
        and usc.enabled = 1");

    return t('Update Devices from extra Info in %secs', array('%secs' =>
      number_format(microtime(TRUE)-$tstart, 4)));
}

/**
 * Gets an array with Firmware Names as keys and Firmware id's as values to reverse serialized Info
 * on the extra field of the devices table. If a $firmwareName is supplied gets a unique item
 * @param string $firmwareName
 * @return
 *   Array
 */
function guifi_get_AllfirmwaresByName($firmwareName=null) {
  $query = db_query('select id, nom from guifi_firmware order by id asc');

  $firms_tots = null;
  while ($firmware = $query->fetchAssoc()) {
    // si no em demanen un concret
    if (!$firmwareName) {
      $firms_tots[$firmware['nom']] = $firmware['id'];
    } else {
      // comprovar que el nom es el que em demanen
      if ($firmwareName==$firmwares['nom']) $firms_tots[$firmwares['nom']] = $firmwares['id'];
    }
  }
  return $firms_tots;
}

/*
* This function starts out with several checks in an attempt to save time.
*   1.  The shorter string is always used as the "right-hand" string (as the size of the array is based on its length).
*   2.  If the left string is empty, the length of the right is returned.
*   3.  If the right string is empty, the length of the left is returned.
*   4.  If the strings are equal, a zero-distance is returned.
*   5.  If the left string is contained within the right string, the difference in length is returned.
*   6.  If the right string is contained within the left string, the difference in length is returned.
* If none of the above conditions were met, the Levenshtein algorithm is used.
*/
function LevenshteinDistance($s1, $s2)
{
  $sLeft = (strlen($s1) > strlen($s2)) ? $s1 : $s2;
  $sRight = (strlen($s1) > strlen($s2)) ? $s2 : $s1;
  $nLeftLength = strlen($sLeft);
  $nRightLength = strlen($sRight);
  if ($nLeftLength == 0)
    return $nRightLength;
  else if ($nRightLength == 0)
    return $nLeftLength;
  else if ($sLeft === $sRight)
    return 0;
  else if (($nLeftLength < $nRightLength) && (strpos($sRight, $sLeft) !== FALSE))
    return $nRightLength - $nLeftLength;
  else if (($nRightLength < $nLeftLength) && (strpos($sLeft, $sRight) !== FALSE))
    return $nLeftLength - $nRightLength;
  else {
    $nsDistance = range(1, $nRightLength + 1);
    for ($nLeftPos = 1; $nLeftPos <= $nLeftLength; ++$nLeftPos)
    {
      $cLeft = $sLeft[$nLeftPos - 1];
      $nDiagonal = $nLeftPos - 1;
      $nsDistance[0] = $nLeftPos;
      for ($nRightPos = 1; $nRightPos <= $nRightLength; ++$nRightPos)
      {
        $cRight = $sRight[$nRightPos - 1];
        $nCost = ($cRight == $cLeft) ? 0 : 1;
        $nNewDiagonal = $nsDistance[$nRightPos];
        $nsDistance[$nRightPos] =
          min($nsDistance[$nRightPos] + 1,
              $nsDistance[$nRightPos - 1] + 1,
              $nDiagonal + $nCost);
        $nDiagonal = $nNewDiagonal;
      }
    }
    return $nsDistance[$nRightLength];
  }
}

function guifi_check_unsolclics( $verbose = FALSE) {
  $tstart = microtime(TRUE);
  $array = array();

  $range = 0;
  $device_id = null;

  // URLS per defecte utilitzats durant les proves del PFC TODO eliminar
  $trustedSite = 'http://guifimaster';
  $localSite = 'http://guifilocal';


  if ($_GET["action"])$action = $_GET["action"];
  if ($_GET["trustedsite"]) $trustedSite = $_GET["trustedsite"];
  if ($_GET["testingsite"]) $localSite = $_GET["testingsite"];
  if ($_GET["range"]) $range = $_GET["range"];
  else $range = 2;
  switch($range) {
    case '2':
        $selectedRange2 = ' selected';
        break;
    case '3':
        $selectedRange3 = ' selected';
        break;
    case '4':
        $selectedRange4 = ' selected';
        break;
    default:
        $selectedRange1 = ' selected';
  }

  if ($_GET["device_id"]) $device_id = $_GET["device_id"];
  if ($_GET["maxdevices"]) $maxdevices = $_GET["maxdevices"];
  else $maxdevices = 5;

  if ($_GET["algorithm"]) $algorithm = $_GET["algorithm"];
  else $algorithm = 1;

  switch($algorithm) {
    case '2':    //text_similar
        $algorithmDescription  = ' Text_similar';
        $selected2 = ' selected';
        break;
    case '3':   // Levenshtein
        $algorithmDescription  = ' Levenshtein';
        $selected3 = ' selected';
        break;
    default:  // direct string comparison
        $algorithmDescription  = ' Direct String Comparison';
        $selected1 = ' selected';
  }


  $avui = new DateTime;
  $dateLimit = clone $avui;
  $dateLimit->modify("-$range day");

  $output = "<form action='checkunsolclics' method='GET'>";
  $output .= "<table style='width:720px;'>";
  $output .= "<tr>";
    $output .= "<td style='width: 90px;'>Trusted Site</td>";
    $output .= "<td style='width: 130px;'><input type='text' name='trustedsite' value='$trustedSite' style='width: 130px;' /></td>";
    $output .= "<td style='width: 90px;'>Testing Site</td>";
    $output .= "<td><input type='text' name='testingsite' value='$localSite'  style='width: 130px;' /></td>";
    $output .= "<td style='width: 90px;'>Device Id</td>";
    $output .= "<td colspan=2><input type='text' name='device_id' value='$device_id'  style='width: 30px;' /></td>";

  $output .= "</tr>";
  $output .= "<tr>";
   $output .= "<td>Date Limit</td>";
    $output .= "<td><select name='range'>
                    <option value='1'$selectedRange1>1 day</option>
                    <option value='7'$selectedRange2>1 week</option>
                    <option value='30'$selectedRange3>1 Month</option>
                    <option value='365'$selectedRange4>1 year</option>
    </td>";
   $output .= "<td>Algorithm</td>";
    $output .= "<td><select name='algorithm'>
                    <option value='1'$selected1>Exact</option>
                    <option value='2'$selected2>Similar Text</option>
                    <option value='3'$selected3>Levenshtein</option>
    </td>";
   $output .= "<td>Max Devices</td>";
    $output .= "<td><input type='text' name='maxdevices' value='$maxdevices' style='width: 30px;'/></td>";
    $output .= "<td><input type='submit' name='action' value='TEST!' /></td>";
  $output .= "</tr>";
  $output .= "</table>";
  $output .= "</form>";

  if ($action) {

    $trustedSite = $_GET["trustedsite"];//'http://guifimaster';
    $localSite = $_GET["testingsite"];'http://guifilocal';


    // buscar les configuracions unsolclic validades
    $sql= db_query("select usc.id, usc.mid, usc.fid, usc.enabled , m.model,f.nom
                    from guifi_configuracioUnSolclic usc
                        inner join guifi_model_specs m  on m.mid = usc.mid
                        inner join guifi_firmware f on f.id = usc.fid
                    where usc.enabled = 1
                    order by usc.id asc ");
    while ($configuracio = $sql->fetchObject()) {
      $unsolclics[$configuracio->id]['mid'] = $configuracio->mid;
      $unsolclics[$configuracio->id]['fid'] = $configuracio->fid;
      $unsolclics[$configuracio->id]['model'] = $configuracio->model;
      $unsolclics[$configuracio->id]['firmware'] = $configuracio->nom;
    }


    $totaldevices = 0;
    $devicesFail = 0;
    $devicesOK = 0;

    foreach ($unsolclics as $confkey => $confValues) {

      $partialFail = 0;
      $partialOK = 0;
      $partialdevices = 0;


      $output .= "<br>Configuració UnSolClic : <a href='/ca/guifi/menu/devel/configuraciousc/$confkey/edit'>". $confValues['model'] ."-". $confValues['firmware'] ."</a> (id $confkey)";

      // buscar tots els devices que tenen un model i firmware cobert per les USC validades
      $sql= db_query("select d.id, d.nid, d.nick, mo.model, mo.fid, mf.name
                      from guifi_configuracioUnSolclic  usc
                           inner join guifi_devices d on d.mid = usc.mid and d.fid = usc.fid and d.flag = 'Working'
                           inner join guifi_model_specs mo on mo.mid = usc.mid
                           inner join guifi_manufacturer mf on mf.fid = mo.fid
                      where usc.id = :uid", array(':uid' => $confkey)); //

      while ($configuracio = $sql->fetchObject()) {
        if ($partialdevices >= $maxdevices)  break;

        if ($configuracio->name=='Ubiquiti') $trustedURL = $trustedSite . '/files/nanostation/'. $configuracio->nick .'.cfg';
        else $trustedURL = $trustedSite . '/guifi/device/'. $configuracio->id .'/view/unsolclic';
        $localURL = $localSite. '/guifi/device/'. $configuracio->id .'/view/unsolclic';


        if ($device_id) {
          //echo "em passen un device conret $device_id ? $configuracio->id";
          if($device_id==$configuracio->id) {
            $resultat = check_unsolclicURL($configuracio->id, $localURL,$trustedURL, $algorithm);
            $output .= "<br>Checking device <a href='/guifi/device/$configuracio->id'>". $configuracio->id  ."</a> : ". $resultat ." with Comparison Algorithm - ". $algorithmDescription;
            $output .= " <a href=' $localURL'>Local </a>";
            $output .= " | <a href='$trustedURL'>Trusted</a>";
          }
        } else {
          $resultat = check_unsolclicURL($configuracio->id, $localURL,$trustedURL, $algorithm);
          $output .= "<br>Checking device <a href='/guifi/device/$configuracio->id'>". $configuracio->id  ."</a> : ". $resultat ." with Comparison Algorithm - ". $algorithmDescription;
          if ($resultat) {
            $partialOK++;
          } else {
            $partialFail++;
          }
          $output .= " <a href=' $localURL'>Local </a>";
          $output .= " | <a href='$trustedURL'>Trusted</a>";
          $partialdevices++;
        }
      }
      $devicesOK  = $devicesOK + $partialOK;
      $devicesFail = $devicesFail + $partialFail;
      $totaldevices = $totaldevices + $partialdevices;
      //$output .= "<br>Results for UnSolClic #". $confValues['model'] ."-". $confValues['firmware'] ."($confkey) -  [Total] : $partialdevices - [OK] : $partialOK - [FAIL] : $partialFail";
      $output .= "<br>Results for UnSolClic #". $confValues['model'] ."-". $confValues['firmware'] ."($confkey) -  [Total] : $partialdevices";
      $output .= "<br><br>";
    }

    return $output ."<br>". t('Checked Total %unsolclics Unsolclics for %totaldevices devices([OK] %devicesOK - [FAIL] %devicesFAIL) in %secs ',
                              array('%unsolclics' => count($unsolclics),
                                    '%totaldevices' => $totaldevices,
                                    '%devicesOK' => $devicesOK,
                                    '%devicesFAIL' => $devicesFail,
                                    '%secs' => number_format(microtime(TRUE)-$tstart, 4)));
  } else {
    //$output .= "No devices to test!<br><br>";

  }
  return $output;
  // per cadascun dels devices, comprovar la versio local del unsolclic contra la oficial

  // guardar els resultats dels correctes i dels incorrectes


}

function check_unsolclicURL($device_id, $localUrl, $trustedUrl, $algorithm) {

// per forçar que la consulta web es faci sempre en Català
$opts = array(
  'http'=>array(
    'method'=>"GET",
    'header'=>"Accept-language: ca\r\n"
  )
);

$context = stream_context_create($opts);


  $htmlLocal = trim(file_get_contents($localUrl, false, $context));
  $htmlTrusted = trim(file_get_contents($trustedUrl, false, $context));

  if ($htmlLocal) {
    $htmlLocal = str_replace(' ', '', $htmlLocal);
  }
  if ($htmlTrusted) {
    $htmlTrusted = str_replace(' ', '', $htmlTrusted);
  }
  switch($algorithm) {
    case '2':    //text_similar
        $resultat = similar_text($htmlLocal, $htmlTrusted, $percent);
        $resultat = number_format($percent, 2);
        break;
    case '3':   // Levenshtein
        $resultat = LevenshteinDistance($htmlLocal, $htmlTrusted);
        break;
    default:  // direct string comparison
      $resultat = strcmp($lengthLocal, $lengthTrusted);
  }

  return $resultat;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function guifi_menu_block_page() {
  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $output = theme_guifi_menu_block_content($content);
  }
  else {
    $output = t('You do not have any active items.');
  }
  return $output;
}

/**
 * Provide a single block on the guifi menu overview page.
 *
 * @param $item
 *   The menu item to be displayed.
 */
function guifi_menu_block($item) {
  $content = array();
  if (!isset($item['mlid'])) {
    $item += db_query(
      "SELECT mlid, menu_name " .
      "FROM {menu_links} ml " .
      "WHERE ml.router_path = :path " .
      " AND module = 'system'",
      array(':path' => $item['path']))->fetchAssoc();
  }
  $result = db_query("
    SELECT m.load_functions, m.to_arg_functions, m.access_callback
      m.access_arguments, m.page_callback, m.page_arguments, m.title,
      m.title_callback, m.title_arguments, m.type, m.description, ml.*
    FROM {menu_links} ml
    LEFT JOIN {menu_router} m ON ml.router_path = m.path
    WHERE ml.plid = :mlid AND ml.menu_name = :mname AND hidden = 0",
    array(':mlid' => $item['mlid'], ':mname' => $item['menu_name']));
  while ($item = $result->fetchAssoc()) {
    _menu_link_translate($item);
    if (!$item['access']) {
      continue;
    }
    // The link 'description' either derived from the hook_menu 'description' or
    // entered by the user via menu module is saved as the title attribute.
    if (!empty($item['localized_options']['attributes']['title'])) {
      $item['description'] = $item['localized_options']['attributes']['title'];
    }
    // Prepare for sorting as in function _menu_tree_check_access().
    // The weight is offset so it is always positive, with a uniform 5-digits.
    $content[(50000 + $item['weight']) .' '. $item['title'] .' '. $item['mlid']] = $item;
  }
  ksort($content);
  return $content;
}

/**
 * Determine if a user is in compact mode.
 */
function guifi_menu_compact_mode() {
  global $user;
  return (isset($user->guifi_menu_compact_mode)) ? $user->guifi_menu_compact_mode : variable_get('guifi_menu_compact_mode', FALSE);
}

/**
 * Menu callback; Sets whether the guifi menu is in compact mode or not.
 *
 * @param $mode
 *   Valid values are 'on' and 'off'.
 */
function guifi_menu_compact_page($mode = 'off') {
  global $user;

  user_save($user, array('guifi_menu_compact_mode' => ($mode == 'on')));
  if (arg(4) == 'full')
    drupal_goto('guifi');
  else
    drupal_goto('guifi/menu');
}

/**
 * This function formats the content of an administrative block.
 *
 * @param $block
 *   An array containing information about the block. It should
 *   include a 'title', a 'description' and a formatted 'content'.
 * @ingroup themeable
 */
function theme_guifi_menu_block_content($content) {
  if (!$content) {
    return '';
  }

  if (guifi_menu_compact_mode()) {
    $output = '<ul class="menu">';
    foreach ($content as $item) {
      $output .= '<li class="leaf">'. l($item['title'], $item['href'], $item['localized_options']) .'</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<dl class="admin-list">';
    foreach ($content as $item) {
      $output .= '<dt>'. l($item['title'], $item['href'], $item['localized_options']) .'</dt>';
      $output .= '<dd>'. $item['description'] .'</dd>';
    }
    $output .= '</dl>';
  }
  return $output;
}

/**
 * This function formats an administrative page for viewing.
 *
 * @param $blocks
 *   An array of blocks to display. Each array should include a
 *   'title', a 'description', a formatted 'content' and a
 *   'position' which will control which container it will be
 *   in. This is usually 'left' or 'right'.
 * @ingroup themeable
 */
function theme_guifi_menu_page($blocks) {

  $stripe = 0;
  $container = array();

  foreach ($blocks as $block) {
    if ($block_output = theme('admin_block', array('block' => $block))) {
      if (empty($block['position'])) {
        // perform automatic striping.
        $block['position'] = ++$stripe % 2 ? 'left' : 'right';
      }
      if (!isset($container[$block['position']])) {
        $container[$block['position']] = '';
      }
      $container[$block['position']] .= $block_output;
    }
  }

  $output = '<div class="admin clearfix">';
  $output .= theme('system_compact_link');

  foreach ($container as $id => $data) {
    $output .= '<div class="' . $id . ' clearfix">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}

function theme_guifi_contacts($node) {
  global $user;

  if (is_array($node))
    $node = (object)$node;

  if (!isset($node->uid))
    $node->uid = $node->user_created;

  $name_created = db_query('SELECT u.name FROM {users} u WHERE u.uid = :ucreated', array(':ucreated' => $node->user_created))->fetchObject();
  $name_managed = db_query('SELECT u.name FROM {users} u WHERE u.uid = :uid', array(':uid' =>$node->uid))->fetchObject();
  $name_changed = db_query('SELECT u.name FROM {users} u WHERE u.uid = :uchanged', array(':uchanged' =>$node->user_changed))->fetchObject();

  if (($node->notification) and (user_access('create guifi nodes')))
    $rows[] = '<a href="mailto:'. $node->notification .'">'. t('email contact (available if you are logged in)') .'</a>';

  if ($node->uid > 0)
    $rows[] = t('created by') .': '.
      l($name_created->name, 'user/'. $node->user_created) .'&nbsp;'. t('at') .'&nbsp;'. format_date($node->timestamp_created, 'small');
  if ($node->uid != $node->user_created)
    $rows[] = t('managed by') .': '.
      l($name_managed->name, 'user/'. $node->uid);
  if ($node->timestamp_changed > 0)
    $rows[] = t('updated by') .': '.
      l($name_changed->name, 'user/'. $node->user_changed) .'&nbsp;'. t('at') .'&nbsp;'. format_date($node->timestamp_changed);

  return  theme('table',array(
    'header' => array(t('contact information')),
    'rows' => array( array(implode(' · ', $rows))),
    'attributes' => array('width' => '100%')));
}

function guifi_menu_link_alter(&$item, $menu) {
  if ($item['link_path'] == 'guifi/menu/compact/%') {
    $item['options']['alter'] = TRUE;
  }
}


function guifi_menu_translated_menu_link_alter(&$item) {
  if ($item['href'] == 'guifi/menu/compact/%') {
    $item['localized_options']['query'] = drupal_get_destination();
  }
}

/**
 * Implementation of hook_user().
 */
function guifi_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      return array('guifi' => array('name' => 'guifi', 'title' => t('guifi.net configuration'), 'weight' => 3));
      break;
    case 'load':
      break;
    case 'form':
      if ($category == 'guifi') {
        $form['guifi_default_zone'] = guifi_zone_select_field($account->guifi_default_zone, 'guifi_default_zone');
        return $form;
      }
     break;
    case 'validate':
      break;
  }
}

if( !function_exists( 'array2object') ) {
  function array2object($array) {
    if (is_array($array)) {
        $obj = new stdClass();

        foreach ($array as $key => $val) {
            $obj->$key = $val;
        }
    }
    else { $obj = $array; }

    return $obj;
  }
}

if( !function_exists( 'object2array' ) ) {
  function object2array($object) {
    if (is_object($object)) {
      foreach ($object as $key => $value) {
        $array[$key] = $value;
      }
    }
    else { $array = $object; }

    return $array;
  }
}
